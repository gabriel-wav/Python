# -*- coding: utf-8 -*-
"""Cartilha_Funcoes_DEV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKWS0CVhdUNTO24dhJVTygtUbPYaYsHo

### Fun√ß√µes em Python
"""

# Uma fun√ß√£o serve pra "encapsular" um bloco de codigo
# Isso permite reaproveitar codigo, organizar melhor, e tambem "esconder" tarefas secundarias que
# n√£o est√£o relacionadas ao programa que voce esta escrvendo

# Fun√ß√£o sem retorno

# primeiro: declaramos a fun√ß√£o UMA VEZ:
# DECLARA√á√ÉO DA FUN√á√ÉO (CRIA√á√ÉO):

def dizer_ola():
    print("Ol√° mundo")

# UTILIZA√á√ÉO (CHAMADA) DA FUN√á√ÉO:
dizer_ola()
dizer_ola()
dizer_ola()
dizer_ola()

# Fun√ß√µes com parametros
# Os parentesis serve para passar par√¢metros(argumentos) para a fun√ß√£o
# vamos declarar uma funcao que recebe o nome da pessoa e o sobrenome e diz ol√° pra ela

# DECLARA√á√ÉO DA FUN√á√ÉO COM ENTRADA DE PAR√ÇMETROS:
def dizer_ola_personalizado(nome , sobrenome):
    print("Ol√°," , nome,sobrenome)

# CHAMADA DA FUN√á√ÉO EM UM PROGRAMA
nome = input("Digite seu nome: ")
sobrenome = input("Digite seu sobrenome: ")

# dizer_ola_personalizado() ---> isso vai dar erro: faltando 2 argumentos

dizer_ola_personalizado(nome,sobrenome)

# Vamos declarar uma funcao media() que recebe 3 numeros e retorna a media para o programa
# este retorno dever√° ser tratado pelo programa, ou ent√£o se perder√°
# no nosso exemplo, vamos armazena-lo em uma variavel chamada media
# primeiro vamos ver como ficaria o programa SEM USAR fun√ß√µes:

nome_aluno = input("Nome aluno: ")
nota1 = float(input("digite a nota 1: "))
nota2 = float(input("digite a nota 2: "))
nota3 = float(input("digite a nota 3: "))

media = (nota1 + nota2 + nota3) / 3

print(f"MEDIA FINAL DO ALUNO {nome_aluno} : {media:.2f} ")

# agora vamos "embalar" o calculo da media em uma fun√ß√£o:

# DECLARA√á√ÉO DA FUNCAO
def media(n1,n2,n3):  # funcao com argumentos POSICIONAIS
    return (n1+n2+n3)/3

# CHAMADA DA FUN√á√ÉO
nome_aluno = input("Nome aluno: ")
nota1 = float(input("digite a nota 1: "))
nota2 = float(input("digite a nota 2: "))
nota3 = float(input("digite a nota 3: "))

media = media(nota1,nota2,nota3) # o retorno da fun√ß√£o vai ser gravado na variavel media

print(f"MEDIA FINAL DO ALUNO {nome_aluno} : {media:.2f} ")

# Vamos criar uma fun√ß√£o com um argumento de palavra-chave e opcional
# Ela vai receber nome e sobrenome e dizer ola personalizado. se ela nao receber nada, imprimir√° Ol√° Mundo

def dizer_ola_turbinado( nome_usuario = "mundo" ):
    print("Ola" , nome_usuario )

dizer_ola_turbinado()

dizer_ola_turbinado("Anderson")

dizer_ola_turbinado("Jorge")

dizer_ola_turbinado()

dizer_ola_turbinado( nome_usuario = "Marcelo")

# Agora vamos incluir um argumento de palavra-chave vazio, se a funcao receber um valor,
# ela ir√° usar, senao, n√£o ir√° usar

def dizer_ola_clima( clima = '' , nome_usuario = "mundo"  ):
    if clima:
        print("Ola" , nome_usuario, " o clima atual √©: " , clima )
    else:
        print("Ola", nome_usuario )

dizer_ola_clima()
dizer_ola_clima("banana") # encaixa no primeiro argumento da fun√ß√£o
dizer_ola_clima( nome_usuario = "banana" )
dizer_ola_clima( "calor" , "Anderson")
dizer_ola_clima( nome_usuario = "Anderson" , clima = "calor")

# Funcao Lambda:

# imagine a seguinte funcao :
def somar(numero1 , numero2):
    return numero1 + numero2

print( somar(8,9) )

# eu posso transforma-la eu uma funcao lambda deste jeito:
# variavel = lambda <parametros> : <retorno>

somar_lambda = lambda num1,num2 : num1 + num2

print( somar_lambda(5,7) )

"""üß™ Exerc√≠cios de Fun√ß√µes em Python

üìò N√≠vel 1 ‚Äì Fundamentos

‚úÖ Exerc√≠cio 1: Criando sua primeira fun√ß√£o
Crie uma fun√ß√£o chamada boas_vindas que apenas imprime a mensagem:
"Bem-vindo ao nosso sistema!"
"""

def boas_vindas():
 print ("Bem-vindo ao nosso sistema!")

boas_vindas()

"""‚úÖ Exerc√≠cio 2: Fun√ß√£o com par√¢metro
Crie uma fun√ß√£o chamada cumprimentar que receba um nome como par√¢metro e
imprima:
"Ol√°, [nome]!"
"""

def cumprimento(nome):
  print(f"Ol√°, {nome}!")

nome = input("Digite seu nome: ")
cumprimento(nome)

"""‚úÖ Exerc√≠cio 3: Fun√ß√£o com dois par√¢metros
Crie uma fun√ß√£o chamada apresentar que receba um nome e uma idade, e exiba
a mensagem:
"Ol√°, me chamo [nome] e tenho [idade] anos."
"""

def apresentar(nome,idade):
  print(f"Ol√°, me chamo {nome} e tenho {idade} anos.")

nome = input("Digite seu nome: ")
idade = int(input("Digite sua idade: "))
apresentar(nome,idade)

"""‚úÖ Exerc√≠cio 4: Fun√ß√£o que retorna resultado
Crie uma fun√ß√£o chamada soma que receba dois n√∫meros e retorne a soma
deles.
Armazene o resultado em uma vari√°vel e exiba-o com print .
"""

def soma(num1,num2):
  return num1 + num2

num1 = float(input("Digite um n√∫mero: "))
num2 = float(input("Digite outro n√∫mero: "))
resultado = soma(num1,num2)

print (f"O resultado √© {resultado}.")

"""‚úÖ Exerc√≠cio 5: Fun√ß√£o que verifica se √© maior de idade
Crie uma fun√ß√£o chamada eh_maior que recebe uma idade como par√¢metro e
retorna:

"Maior de idade" se for 18 ou mais

"Menor de idade" se for menor
"""

def eh_maior(idade):
  if idade >= 18:
    return "Maior de idade"
  else:
    return "Menor de idade"

idade = int(input("Digite sua idade: "))
print(eh_maior(idade))

"""üìó N√≠vel 2 ‚Äì Trabalhando com l√≥gica

‚úÖ Exerc√≠cio 6: Fun√ß√£o que calcula o quadrado de um n√∫mero
Crie uma fun√ß√£o chamada quadrado que receba um n√∫mero e retorne o valor ao
quadrado.
"""

def potencia_ao_quadrado(num):
  return num ** 2

num = float(input("Digite um n√∫mero: "))
print(potencia_ao_quadrado(num))

"""‚úÖ Exerc√≠cio 7: Fun√ß√£o que recebe uma tupla e retorna a m√©dia
Crie uma fun√ß√£o chamada media_notas que recebe uma tupla com duas notas e
retorne a m√©dia.
"""

def media_notas(notas):
  return sum(notas) / len(notas)

notas = (float(input("Digite a primeira nota: ")), float(input("Digite a segunda nota: ")))
print('A sua nota foi: ', media_notas(notas))

"""‚úÖ Exerc√≠cio 8: Fun√ß√£o que recebe um dicion√°rio e imprime os
valores

Crie uma fun√ß√£o chamada exibir_dados que recebe um dicion√°rio com:

nome

idade

curso

A fun√ß√£o deve exibir os dados formatados, um por linha.
"""

def exibir_dados(nome, idade, curso):
  print(f"Nome: {nome}")
  print(f"Idade: {idade}")
  print(f"Curso: {curso}")
  return

nome = input("Digite seu nome: ")
idade = int(input("Digite sua idade: "))
curso = input("Digite seu curso: ")
exibir_dados(nome, idade, curso)

"""‚úÖ Exerc√≠cio 9: Fun√ß√£o que recebe uma lista de nomes e
imprime um por um
Crie uma fun√ß√£o chamada listar_nomes que recebe uma lista de nomes e imprime
cada nome da lista.
"""

def listar_nomes():
  nomes = []
  while True:
    nome = input("Digite um nome: ")
    if nome == "":
      break
    nomes.append(nome)
  for nome in nomes:
    print(nome)
  return

listar_nomes()

"""üöÄ Exerc√≠cio 10: DESAFIO ‚Äì Fun√ß√£o "Caixa Eletr√¥nico"
Crie uma fun√ß√£o chamada caixa_eletronico que:

Recebe um valor (n√∫mero inteiro)

Retorna a quantidade de notas de R100, R50, R20 e R10 necess√°rias
para formar o valor

Utilize divmod() para facilitar a conta

üìå Exemplo:

caixa_eletronico(280)
# Retorna: 2 notas de 100 reais, 1 nota de 50 reais, 1 nota de 20 reais, 1 nota de 10 reais
"""

def caixa_eletronico(valor):
    notas = [100, 50, 20, 10, 5, 2]
    resultado = []

    for nota in notas:
        qtd, valor = divmod(valor, nota)
        if qtd > 0:
            resultado.append(f"{qtd} nota(s) de R${nota}")

    return "\n".join(resultado)

valor = int(input("Digite o valor a ser sacado: "))
print(caixa_eletronico(valor))