# -*- coding: utf-8 -*-
"""TUPLA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12XOhVuhVm3cXrrNR_2KdMoaqZZiEgM2K

ðŸ§  NÃ­vel 1 â€“ Fundamentos

âœ… ExercÃ­cio 1: Criando um dicionÃ¡rio com tupla

Crie um dicionÃ¡rio chamado aluno com os seguintes dados:

nome: "Lucas"

idade: 17

cursos: uma tupla com os cursos "MatemÃ¡tica" e "Python BÃ¡sico"

Depois, mostre os dados na tela, incluindo o segundo curso da tupla.
"""

aluno = {
    "nome": "Lucas",
    "idade": 17,
    "cursos": ("MatemÃ¡tica", "Python BÃ¡sico")
}

print("Nome:", aluno["nome"])
print("Idade:", aluno["idade"])
print("Cursos:", aluno["cursos"])
print("Segundo curso:", aluno["cursos"][1])

"""âœ… ExercÃ­cio 2: Acessando dados da tupla

Utilize o dicionÃ¡rio do exercÃ­cio anterior para mostrar apenas:

O nome do aluno

O primeiro curso da tupla
"""

aluno = {
    "nome": "Lucas",
    "idade": 17,
    "cursos": ("MatemÃ¡tica", "Python BÃ¡sico")
}

print("Nome do aluno:", aluno["nome"])
print("Primeiro curso:", aluno["cursos"][0])

"""âœ… ExercÃ­cio 3: Alterando valores e adicionando chave com
tupla
No dicionÃ¡rio aluno faÃ§a:

Altere a idade para 18

Adicione a chave "disciplinas_favoritas" com uma tupla: "Python" e "Algoritmos"


Depois, exiba o dicionÃ¡rio completo.


"""

aluno = {
    "nome": "Lucas",
    "idade": 17,
    "cursos": ("MatemÃ¡tica", "Python BÃ¡sico")
}

aluno["idade"] = 18

aluno["disciplinas_favoritas"] = ("Python", "Algoritmos")

print(aluno)

"""âœ… ExercÃ­cio 4: Usando .get() para acesso seguro

Tente acessar a chave "nota_final" do dicionÃ¡rio usando o mÃ©todo .get() .

Caso a chave nÃ£o exista, exiba a mensagem "Nota ainda nÃ£o cadastrada."

ðŸ“Œ Dica: .get("chave", "mensagem padrÃ£o") evita erros se a chave nÃ£o existir.
"""

nota = aluno.get("nota_final", "Nota ainda nÃ£o cadastrada.")

print(nota)

"""âœ… ExercÃ­cio 5: Remover chave com del
Remova a chave "disciplinas_favoritas" do dicionÃ¡rio.
Depois, mostre o dicionÃ¡rio atualizado.

"""

del aluno["disciplinas_favoritas"]

print(aluno)

"""ðŸ§© NÃ­vel 2 â€“ Trabalhando com listas e tuplas

âœ… ExercÃ­cio 6: Lista de compras com tupla

Crie uma tupla de produtos com trÃªs itens.

Depois, crie um dicionÃ¡rio compras onde:

Cada produto da tupla Ã© uma chave

O valor Ã© a quantidade comprada

Percorra a tupla e mostre quantos itens de cada produto foram comprados.
"""

produtos = ("Arroz", "FeijÃ£o", "MacarrÃ£o")

compras = {
    "Arroz": 2,
    "FeijÃ£o": 1,
    "MacarrÃ£o": 3
}

for produto in produtos:
    print(f"{produto}: {compras[produto]} unidades")

"""âœ… ExercÃ­cio 7: Lista de alunos (com notas em tupla)

Crie uma lista turma com 3 dicionÃ¡rios, um para cada aluno.

Cada dicionÃ¡rio deve conter:

nome

idade

notas : tupla com duas notas

Percorra a lista e mostre o nome de cada aluno e sua mÃ©dia de notas.

"""

turma = [
    {"nome": "Lucas", "idade": 17, "notas": (8.0, 7.5)},
    {"nome": "Ana", "idade": 16, "notas": (9.0, 8.5)},
    {"nome": "Carlos", "idade": 18, "notas": (6.0, 7.0)}
]

for aluno in turma:
    nome = aluno["nome"]
    notas = aluno["notas"]
    media = sum(notas) / len(notas)
    print(f"{nome} - MÃ©dia: {media:.1f}")

"""âœ… ExercÃ­cio 8: MÃ©dia geral da turma

Usando os dados da lista turma , calcule a mÃ©dia geral das notas de todos os
alunos juntos.
"""

turma = [
    {"nome": "Lucas", "idade": 17, "notas": (8.0, 7.5)},
    {"nome": "Ana", "idade": 16, "notas": (9.0, 8.5)},
    {"nome": "Carlos", "idade": 18, "notas": (6.0, 7.0)}
]

soma_notas = 0
quantidade_notas = 0

for aluno in turma:
    notas = aluno["notas"]
    soma_notas += sum(notas)
    quantidade_notas += len(notas)

media_geral = soma_notas / quantidade_notas
print(f"MÃ©dia geral da turma: {media_geral:.1f}")

"""âœ… ExercÃ­cio 9: Maior nota da turma

Percorra os alunos e descubra quem tirou a maior nota individual (de qualquer
posiÃ§Ã£o da tupla).

Mostre o nome do aluno e o valor da nota.
"""

turma = [
    {"nome": "Lucas", "idade": 17, "notas": (8.0, 7.5)},
    {"nome": "Ana", "idade": 16, "notas": (9.0, 8.5)},
    {"nome": "Carlos", "idade": 18, "notas": (6.0, 7.0)}
]

maior_nota = 0
aluno_com_maior_nota = ""

for aluno in turma:
    for nota in aluno["notas"]:
        if nota > maior_nota:
            maior_nota = nota
            aluno_com_maior_nota = aluno["nome"]

print(f"A maior nota foi {maior_nota} e foi tirada por {aluno_com_maior_nota}.")

"""ðŸš€ ExercÃ­cio 10: DESAFIO â€“ Mini sistema de
biblioteca com tuplas

Crie um pequeno programa onde o usuÃ¡rio possa cadastrar livros, sendo que
cada livro deve conter:

tÃ­tulo

autor

ano de publicaÃ§Ã£o

ðŸ“Œ Cada livro serÃ¡ salvo como uma tupla: (tÃ­tulo, autor, ano)
Todos os livros devem ser guardados em uma lista chamada biblioteca .

Ao final, exiba todos os livros cadastrados no formato:

ðŸ“š Livros cadastrados:

1. TÃ­tulo: Dom Casmurro | Autor: Machado de Assis | Ano: 1899
2. ...
"""

# Lista que vai armazenar os livros cadastrados
biblioteca = []

# LaÃ§o para cadastrar livros
while True:
    # Solicitar dados do livro
    titulo = input("Digite o tÃ­tulo do livro: ")
    autor = input("Digite o autor do livro: ")
    ano = int(input("Digite o ano de publicaÃ§Ã£o: "))

    # Salvar o livro como uma tupla e adicionar na lista biblioteca
    livro = (titulo, autor, ano)
    biblioteca.append(livro)

    # Perguntar se o usuÃ¡rio quer cadastrar outro livro
    continuar = input("Deseja cadastrar outro livro? (s/n): ").lower()
    if continuar != 's':
        break

# Exibir os livros cadastrados
print("\nðŸ“š Livros cadastrados:")
for livro in biblioteca:
    print(f"TÃ­tulo: {livro[0]} | Autor: {livro[1]} | Ano: {livro[2]}")