# -*- coding: utf-8 -*-
"""missaopythonenigma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/198r-3aYjx0sRUK56iDlsiZNFSyrD0q_v

### ‚òî **Contexto**

Voc√™ foi contratado como **programador j√∫nior da Ag√™ncia Secreta** para desenvolver um sistema de codifica√ß√£o de mensagens. O sistema precisa transformar palavras comuns em c√≥digos secretos, usando um m√©todo simples: **cada letra ser√° substitu√≠da pela pr√≥xima na tabela ASCII**.

Seu trabalho √© criar um programa que:

‚úÖ Pe√ßa 3 palavras do usu√°rio (de at√© 5 letras cada).

‚úÖ Codifique cada letra **manual e individualmente** (sem la√ßos).

‚úÖ Junte as letras codificadas e mostre a mensagem final com uma **formata√ß√£o bonita**.

‚úÖ Use **`ord()`** e **`chr()`**, **acesso por √≠ndice** (`palavra[0]`) e **f-string** ou `.format()` na sa√≠da.

---

## üìö Parte 1 ‚Äì Pesquisa Obrigat√≥ria:

Antes de come√ßar, anote no caderno ou arquivo:

1. O que `ord()` faz em Python?

 R: Ele retorna o valor inteiro do c√≥digo Unicode de um caractere.

2. O que `chr()` faz?
  
  R: Ele faz o inverso do ord(), convertendo um c√≥digo Unicode de volta para um caractere.
3. Como transformar uma string em uma lista de letras? (ex: `list("texto")`)

 R: Para transformar uma string em uma lista de letras em Python, use list(string). Exemplo:

 `lista = list("Python")  # Resultado: ['P', 'y', 't', 'h', 'o', 'n']`

 Alternativas:
 Compreens√£o de lista: [letra for letra in string]

 Operador *: [*string]

4. O que s√£o f-strings? D√™ um exemplo com vari√°veis.

 R: As f-strings (formatted string literals) s√£o uma forma simples e eficiente de formatar strings em Python (a partir da vers√£o 3.6). Elas permitem inserir vari√°veis e express√µes diretamente dentro de strings usando { }.

5. Como acessar letras espec√≠ficas de uma string com √≠ndice (`palavra[0]`, etc)?

 R: As strings s√£o sequ√™ncias imut√°veis de caracteres, e voc√™ pode acessar letras individuais usando √≠ndices (posi√ß√µes).

6. O que acontece se tentarmos acessar uma letra que n√£o existe (ex: `palavra[6]` em uma palavra com s√≥ 4 letras)?

 R: Se tentar acessar um √≠ndice que n√£o existe, Python retorna um erro:

 `print(palavra[10])  # IndexError: string index out of range`

7. O que √© a  **tabela ASCII**.?

 R: A ASCII (American Standard Code for Information Interchange) √© um padr√£o de codifica√ß√£o que mapeia caracteres (letras, n√∫meros, s√≠mbolos) em n√∫meros bin√°rios (valores de 0 a 127). Criada na d√©cada de 1960, foi uma das primeiras formas de representar texto em computadores.

## Parte 2 ‚Äì M√£o na massa

### Exemplo de como codificar uma letra:

```python
letra = "a"
codigo = ord(letra)
letra_codificada = chr(codigo + 1)
print(letra_codificada)  # sa√≠da: b

```

---

## ‚úÖ Regras do programa:

- Use `input()` para pedir 3 palavras (at√© 5 letras).
- Separe letra por letra usando `palavra[0]`, `palavra[1]`, etc.
- Aumente 1 no c√≥digo ASCII com `ord() + 1` e converta de volta com `chr()`.
- Reconstrua cada palavra codificada e junte as 3 palavras numa frase.
- Formate a sa√≠da com **f-string** ou `.format()` (obrigat√≥rio).
- **N√£o use for nem while.**
"""

primeiraPalavra = input('Digite a primeira palavra com at√© 5 letras: ').strip()[:5]
segundaPalavra = input('Digite a segunda palavra com at√© 5 letras: ').strip()[:5]
terceiraPalavra = input('Digite a terceira palavra com at√© 5 letras: ').strip()[:5]

primeiraPalavraLetra1 = primeiraPalavra[0]
primeiraPalavraLetra2 = primeiraPalavra[1]
primeiraPalavraLetra3 = primeiraPalavra[2]
primeiraPalavraLetra4 = primeiraPalavra[3]
primeiraPalavraLetra5 = primeiraPalavra[4]

segundaPalavraLetra1 = segundaPalavra[0]
segundaPalavraLetra2 = segundaPalavra[1]
segundaPalavraLetra3 = segundaPalavra[2]
segundaPalavraLetra4 = segundaPalavra[3]
segundaPalavraLetra5 = segundaPalavra[4]

terceiraPalavraLetra1 = terceiraPalavra[0]
terceiraPalavraLetra2 = terceiraPalavra[1]
terceiraPalavraLetra3 = terceiraPalavra[2]
terceiraPalavraLetra4 = terceiraPalavra[3]
terceiraPalavraLetra5 = terceiraPalavra[4]


resultadoCodificado = (ord(primeiraPalavraLetra1)+1,
                       ord(primeiraPalavraLetra2)+1,
                       ord(primeiraPalavraLetra3)+1,
                       ord(primeiraPalavraLetra4)+1,
                       ord(primeiraPalavraLetra5)+1)

resultadoDescodificado = (chr(resultadoCodificado[0]-1) +
                          chr(resultadoCodificado[1]-1) +
                          chr(resultadoCodificado[2]-1) +
                          chr(resultadoCodificado[3]-1) +
                          chr(resultadoCodificado[4]-1))


print("\nPalavras digitadas:")
print(primeiraPalavra, segundaPalavra, terceiraPalavra)

print("\nCodifica√ß√£o da primeira palavra (valores ASCII + 1):")
print(resultadoCodificado)

print("\nDecodifica√ß√£o (revertendo os valores):")
print(resultadoDescodificado)

print("\nLetras isoladas:")
print(
    primeiraPalavraLetra1,
    primeiraPalavraLetra2,
    primeiraPalavraLetra3,
    primeiraPalavraLetra4,
    primeiraPalavraLetra5,
    segundaPalavraLetra1,
    segundaPalavraLetra2,
    segundaPalavraLetra3,
    segundaPalavraLetra4,
    segundaPalavraLetra5,
    terceiraPalavraLetra1,
    terceiraPalavraLetra2,
    terceiraPalavraLetra3,
    terceiraPalavraLetra4,
    terceiraPalavraLetra5,
)